<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>📺</text></svg>" />
    <title><%= movie.title %> - Details</title>

    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />

    <!-- External CSS -->
    <link rel="stylesheet" href="/css/styles.css" />
    <link rel="stylesheet" href="/css/movie.css" />

    <!-- Icons -->
    <link
      href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
    />

    <!-- Toastify CSS and JS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

    <style>
    #comments-section {
    max-width: 940px;
    margin: 0 auto;
    padding: 0 20px;
}
      #comments-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }
      .comment-box {
        width: 100%;
        margin-bottom: 1rem;
      }
      .comment-header {
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        padding-bottom: 0.5rem;
      }
      .comment-content {
        padding-top: 0.5rem;
      }
      .comment-username {
        font-size: 1.2rem;
      }
      .star-rating {
        font-size: 1.2rem;
      }

      /* Recommendation Chat Styles */
      .recommendation-chat {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 400px;
        height: 600px;
        background: #1a1a1a;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        display: none;
        flex-direction: column;
        z-index: 1000;
      }

      .recommendation-chat.active {
        display: flex;
      }

      .chat-header {
        padding: 15px;
        background: #2a2a2a;
        border-radius: 10px 10px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .chat-body {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
      }

      .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
      }

      .chat-input {
        padding: 15px;
        background: #2a2a2a;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
      }

      .recommendation-results {
        padding: 15px;
        overflow-y: auto;
        max-height: 100%;
      }

      .recommendation-results .movie-link {
        display: block;
        color: #f5c518;
        text-decoration: none;
        font-size: 1.1rem;
        margin-bottom: 15px;
        transition: color 0.3s ease;
      }

      .recommendation-results .movie-link:hover {
        color: #ffd700;
      }

      .get-another-movie {
        width: 100%;
        padding: 10px;
        background: #2a2a2a;
        border: none;
        border-radius: 5px;
        color: white;
        cursor: pointer;
        margin-top: 10px;
      }

      .get-another-movie:hover {
        background: #3a3a3a;
      }

      .sticky-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(to right, #00eaff, #00a8b5);
        color: #000;
        display: flex;
        align-items: center;
        justify-content: center;
        text-decoration: none;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        transition: all 0.3s ease;
        z-index: 1000;
      }

      .sticky-button:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);
      }

      .admin-btn {
        bottom: 80px; /* Position the admin button higher */
      }
    </style>
  </head>
  <body>
    <!-- Navbar -->
    <%- include('../partials/navbar.ejs') %>

    <!-- IMDb-Inspired Movie Detail Section -->
    <section class="container my-5 pt-5 d-flex justify-content-center">
      <div class="movie-detail-section w-100">
        <!-- Trailer on the left -->
        <div class="trailer-embed d-flex justify-content-center align-items-start flex-column">
          <% if (movie.trailerURL) { %>
          <div class="ratio ratio-16x9 w-100">
            <iframe
              src="<%= movie.trailerURL.replace('watch?v=', 'embed/') %>"
              title="Trailer"
              frameborder="0"
              allowfullscreen
            ></iframe>
          </div>
          <% } %>
          <div class="description mt-4"> <%= movie.description %> </div>
        </div>

        <!-- Poster and info on the right -->
        <div class="d-flex flex-column align-items-center w-100">
          <img
            src="<%= movie.posterURL %>"
            alt="<%= movie.title %> poster"
            class="img-fluid mb-3"
          />
          <h1 class="text-center mb-3"> <%= movie.title %> </h1>
          <div class="meta d-flex flex-column align-items-center mb-3">
            <span><i class="fa-solid fa-calendar"></i> <%= new Date(movie.releasedate).getFullYear() %></span>
            <span><i class="fa-solid fa-clock"></i> <%= movie.duration %> min</span>
            <span><i class="fa-solid fa-film"></i> <%= movie.genre.join(', ') %></span>
            <span><i class="fa-solid fa-star"></i> <span style='color:#f5c518'><%= movie.rating %></span>/10</span>
          </div>

          <% if (user) { %>
          <div class="my-2 text-center">
            <button 
              class="btn save-to-list"
              data-movie-id="<%= movie._id %>"
              data-in-watchlist="<%= user.watchlist && user.watchlist.includes(movie._id) %>">
              <i class="fas fa-heart"></i> 
              <span class="button-text">
                <%= user.watchlist && user.watchlist.includes(movie._id) ? 'Remove from Watchlist' : 'Add to Watchlist' %>
              </span>
            </button>
          </div>
          <% } %>

          <!-- Cast Circle Cards -->
          <% if (movie.cast && movie.cast.length > 0) { %>
            <div class="cast-section mt-4 w-100 text-center">
              <h4 class="text-light mb-3">Cast</h4>
              <div class="d-flex flex-wrap justify-content-center gap-3">
                <% movie.cast.forEach(castMember => { %>
                  <a href="/cast/<%= castMember._id %>" class="text-decoration-none">
                    <div class="cast-card text-center">
                      <div class="cast-image-wrapper" style="width: 80px; height: 80px; margin: 0 auto;">
                        <img
                          src="<%= castMember.photoURL || castMember.profileImageURL %>"
                          alt="<%= castMember.name %>"
                          class="rounded-circle"
                          style="width: 100%; height: 100%; object-fit: cover;"
                          loading="lazy"
                        />
                      </div>
                      <small class="text-light d-block mt-2"><%= castMember.name %></small>
                    </div>
                  </a>
                <% }) %>
              </div>
            </div>
          <% } %>
        </div>
      </div>
    </section>

    <!-- You May Like Section -->
    <% if (relatedMovies && relatedMovies.length > 0) { %>
      <section class="you-may-like-section container my-5">
        <h2>You May Like</h2>
        <div class="row">
          <% relatedMovies.forEach(similar => { %>
            <div class="col-6 col-sm-4 col-md-3 mb-4">
              <a href="/api/movies/<%= similar._id %>" class="text-decoration-none">
                <div class="card h-100">
                  <img
                    src="<%= similar.posterURL %>"
                    class="card-img-top"
                    alt="<%= similar.title %> poster"
                  />
                  <div class="card-body text-center">
                    <h6 class="card-title"><%= similar.title %></h6>
                  </div>
                </div>
              </a>
            </div>
          <% }) %>
        </div>
      </section>
    <% } %>

    <div id="comments-section" class="container my-5">
      <h3 class="text-light">User Reviews</h3>
      <div id="comments-list" class="mb-3"></div>
      <% if (user) { %>
        <form id="commentForm">
          <textarea name="text" required placeholder="Write your review..."></textarea>
          <input type="number" name="rating" min="1" max="10" required placeholder="Rating (1-10)">
          <button type="submit">Submit</button>
        </form>
      <% } else { %>
        <p>Please <a href="/login">login</a> to post a comment.</p>
      <% } %>
    </div>

    <!-- Movie Recommendation Button and Interface -->
    <% if (user) { %>
      <% if (user.role === 'user') { %>
        <button id="recommendationBtn" class="sticky-button recommendation-btn">
          <i class="fas fa-film"></i>
        </button>

        <div id="recommendationChat" class="recommendation-chat">
          <div class="chat-header">
            <h5>Movie Recommendations</h5>
            <button class="close-btn" onclick="toggleRecommendationChat()">
              <i class="fas fa-times"></i>
            </button>
          </div>
          <div class="chat-body">
            <div id="chatMessages" class="chat-messages">
              <div class="message bot">
                What kind of movies are you looking for?
              </div>
            </div>
            <div class="chat-input">
              <select id="genreSelect" class="form-select mb-2">
                <option value="">Select Genre</option>
                <option value="Action">Action</option>
                <option value="Adventure">Adventure</option>
                <option value="Comedy">Comedy</option>
                <option value="Drama">Drama</option>
                <option value="Horror">Horror</option>
                <option value="Sci-Fi">Sci-Fi</option>
                <option value="Romance">Romance</option>
                <option value="Thriller">Thriller</option>
              </select>
              <select id="timeSelect" class="form-select mb-2">
                <option value="">Select Time Period</option>
                <option value="recent">Recent (2020 - Present)</option>
                <option value="2010s">2010s (2010 - 2019)</option>
                <option value="classic">Classic (Before 2010)</option>
              </select>
              <button onclick="get_movie_recommendation()" class="btn btn-primary w-100">Search</button>
            </div>
          </div>
          <div id="recommendationResults" class="recommendation-results">
            <!-- Movie cards will be inserted here -->
          </div>
        </div>
      <% } else if (user.role === 'admin') { %>
        <a href="/admin/<%= user._id %>" class="sticky-button admin-btn">
          <i class="fa-solid fa-plus"></i>
        </a>
      <% } %>
    <% } %>

    <!-- Inject current user ID for JS -->
    <script>
      window.CURRENT_USER_ID = "<%= user ? (user._id || user.id) : '' %>";
    </script>

    <!-- Footer -->
    <%- include('../partials/footer.ejs') %>

    <!-- Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Custom JS -->
    <script type="module" src="/js/script.js"></script>

    <script type="module">
      import showFunToast from "/js/toast.js";

      document.querySelectorAll(".save-to-list").forEach((btn) => {
        btn.addEventListener("click", async () => {
          const movieId = btn.dataset.movieId;
          const isInWatchlist = btn.dataset.inWatchlist === "true";
          const method = isInWatchlist ? "DELETE" : "POST";
          
          try {
            const res = await fetch(`/api/mylist/${movieId}`, {
              method: method,
              credentials: "include",
            });
            const data = await res.json();

            if (res.ok) {
              // Update button state
              btn.dataset.inWatchlist = !isInWatchlist;
              const buttonText = btn.querySelector('.button-text');
              buttonText.textContent = !isInWatchlist ? 'Remove from Watchlist' : 'Add to Watchlist';
              
              // Show appropriate toast message
              if (isInWatchlist) {
                showFunToast("✅ Movie removed from your watchlist!", "linear-gradient(to right, #00eaff, #00a8b5)");
              } else {
                showFunToast("✅ Movie added to your watchlist!", "linear-gradient(to right, #00eaff, #00a8b5)");
              }
            } else {
              showFunToast(data.message || "❗ Operation failed.", "red");
            }
          } catch (err) {
            showFunToast("❗ Network error", "red");
          }
        });
      });

      const movieId = "<%= movie._id %>";

      async function loadComments() {
        try {
          const res = await fetch(`/api/comments/movie/${movieId}`);
          const data = await res.json();
          
          if (!res.ok) {
            console.error('Error loading comments:', data);
            document.getElementById("comments-list").innerHTML = 
              `<div class="alert alert-danger">Failed to load comments: ${data.message || 'Unknown error'}</div>`;
            return;
          }

          let comments = data;
          // If backend returns {comments: [...]}, extract the array
          if (comments && comments.comments) {
            comments = comments.comments;
          }

          console.log('DEBUG: Comments loaded:', comments); // Debug log
          
          const list = document.getElementById("comments-list");
          if (!Array.isArray(comments) || comments.length === 0) {
            list.innerHTML = '<div class="alert alert-info">No comments yet. Be the first to comment!</div>';
            return;
          }

          list.innerHTML = comments
            .map(c => {
              const isOwner = c.user && c.user._id === window.CURRENT_USER_ID;
              return `
                <div class="comment-box mb-3 p-3 border rounded text-light position-relative" style="background-color: rgba(255, 255, 255, 0.05);">
                  <div class="comment-header d-flex align-items-center mb-2">
                    <div class="star-rating me-2" style="color:#f5c518;">
                      <i class="fa-solid fa-star"></i> ${c.rating || 'N/A'}
                    </div>
                    <div class="comment-username" style="color:#f5c518;font-weight:600;">
                      ${c.user ? c.user.name : 'Anonymous'}
                    </div>
                    ${isOwner ? `
                      <div class="comment-actions ms-auto">
                        <button class="btn btn-sm btn-danger delete-comment-btn" data-id="${c._id}">
                          <i class="fas fa-trash"></i>
                        </button>
                      </div>
                    ` : ''}
                  </div>
                  <div class="comment-content">
                    <p class="mb-0">${c.text || ''}</p>
                  </div>
                </div>`;
            })
            .join("");
        } catch (err) {
          console.error('Error in loadComments:', err);
          document.getElementById("comments-list").innerHTML = 
            `<div class="alert alert-danger">Error loading comments: ${err.message || 'Unknown error occurred'}</div>`;
        }
      }
      
      document.addEventListener("click", async (e) => {
  if (e.target.classList.contains("delete-comment-btn")) {
    const commentId = e.target.dataset.id;
    try {
      const res = await fetch(`/api/comments/${commentId}`, {
        method: "DELETE",
        credentials: "include",
      });
      const data = await res.json();
      if (res.ok) {
        showFunToast(data.message || "✅ Comment deleted", "green");
        loadComments();
      } else {
        showFunToast(data.message || "❗ Error deleting comment", "red");
      }
    } catch (err) {
      showFunToast("❗ Network error", "red");
    }
  }
});

      document.getElementById("commentForm")?.addEventListener("submit", async (e) => {
        e.preventDefault();
        const form = e.target;
        const text = form.text.value.trim();
        const rating = parseInt(form.rating.value);

        try {
          const res = await fetch(`/api/comments/${movieId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify({ text, rating }),
          });

          const data = await res.json();
          showFunToast(data.message || "✅ Comment added", "linear-gradient(to right, #00eaff, #00a8b5");
          if (res.ok) {
            form.reset(); // Clear the form after successful submit
            await loadComments(); // Ensure comments are refreshed after submit
          }
        } catch (err) {
          showFunToast("❗ Network error", "red");
        }
      });

      loadComments();

      // Add the recommendation function
      async function get_movie_recommendation() {
        const genre = document.getElementById('genreSelect').value;
        const time = document.getElementById('timeSelect').value;
        
        if (!genre && !time) {
          showFunToast('Please select at least one filter (genre or time period)', 'warning');
          return;
        }

        try {
          // Add a timestamp to prevent caching
          const timestamp = new Date().getTime();
          const response = await fetch(`/api/movies/recommend?genre=${encodeURIComponent(genre)}&time=${encodeURIComponent(time)}&t=${timestamp}`);
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to fetch recommendations');
          }

          const movie = await response.json();
          const resultsDiv = document.getElementById('recommendationResults');
          
          if (!movie) {
            if (genre && time) {
              showFunToast(`No movies found matching ${genre} genre from ${time} period`, 'error');
            } else if (genre) {
              showFunToast(`No movies found in ${genre} genre`, 'error');
            } else if (time) {
              showFunToast(`No movies found from ${time} period`, 'error');
            }
            return;
          }

          // Create new movie card
          const movieCard = `
            <div class="recommendation-result">
              <div class="movie-card">
                <img src="${movie.posterURL}" alt="${movie.title}" />
                <div class="movie-card-rating">⭐ ${movie.rating}</div>
                <div class="movie-card-content">
                  <div class="movie-card-title">${movie.title}</div>
                  <div class="movie-card-info">
                    ${new Date(movie.releasedate).getFullYear()} • ${movie.genre.join(', ')}
                  </div>
                  <div class="movie-card-buttons">
                    <a href="/movie/${movie._id}" class="movie-card-button info-btn">
                      <i class="fas fa-info-circle"></i> Info
                    </a>
                  </div>
                </div>
              </div>
              <button onclick="get_movie_recommendation()" class="get-another-movie">
                <i class="fas fa-random"></i> Get Another Movie
              </button>
            </div>
          `;

          // Replace the content
          resultsDiv.innerHTML = movieCard;

          if (genre && time) {
            showFunToast(`Found a ${genre} movie from ${time} period!`, 'success');
          } else if (genre) {
            showFunToast(`Found a ${genre} movie!`, 'success');
          } else if (time) {
            showFunToast(`Found a movie from ${time} period!`, 'success');
          }
        } catch (error) {
          console.error('Error fetching recommendations:', error);
          showFunToast('Error: ' + error.message, 'error');
        }
      }

      // Add toggle function for recommendation chat
      window.toggleRecommendationChat = function() {
        const chat = document.getElementById('recommendationChat');
        chat.classList.toggle('active');
        if (chat.classList.contains('active')) {
          get_movie_recommendation();
        }
      };

      document.getElementById('recommendationBtn')?.addEventListener('click', toggleRecommendationChat);
    </script>
  </body>
</html>